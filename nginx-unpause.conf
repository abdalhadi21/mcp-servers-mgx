# Nginx configuration for auto-unpausing MCP containers
# Place this in your nginx sites-enabled directory

upstream mcp_sequentialthinking {
    server 127.0.0.1:3001;
}

upstream mcp_web_fetcher {
    server 127.0.0.1:3002;
}

upstream mcp_duckduckgo {
    server 127.0.0.1:3003;
}

upstream mcp_time {
    server 127.0.0.1:3004;
}

upstream mcp_youtube_transcript {
    server 127.0.0.1:3005;
}

# Auto-unpause middleware
map $request_uri $container_name {
    ~^/sequentialthinking/ "mcp-sequentialthinking";
    ~^/web-fetcher/ "mcp-web-fetcher";
    ~^/duckduckgo/ "mcp-duckduckgo";
    ~^/time/ "mcp-time";
    ~^/youtube-transcript/ "mcp-youtube-transcript";
    default "";
}

server {
    listen 80;
    server_name your-server.com;  # Replace with your domain
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    # Sequential thinking MCP server
    location /sequentialthinking/ {
        # Trigger unpause before proxying
        access_by_lua_block {
            local container = "mcp-sequentialthinking"
            local handle = io.popen("/path/to/container-lifecycle-manager.sh unpause " .. container .. " 2>&1")
            local result = handle:read("*a")
            handle:close()
            -- Small delay to ensure container is ready
            ngx.sleep(0.1)
        }
        
        proxy_pass http://mcp_sequentialthinking/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
    }
    
    # Web fetcher MCP server
    location /web-fetcher/ {
        # Trigger unpause before proxying
        access_by_lua_block {
            local container = "mcp-web-fetcher"
            local handle = io.popen("/path/to/container-lifecycle-manager.sh unpause " .. container .. " 2>&1")
            local result = handle:read("*a")
            handle:close()
            -- Small delay to ensure container is ready
            ngx.sleep(0.1)
        }
        
        proxy_pass http://mcp_web_fetcher/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
        
        # Longer timeout for web scraping operations
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }
    
    # DuckDuckGo MCP server
    location /duckduckgo/ {
        # Trigger unpause before proxying
        access_by_lua_block {
            local container = "mcp-duckduckgo"
            local handle = io.popen("/path/to/container-lifecycle-manager.sh unpause " .. container .. " 2>&1")
            local result = handle:read("*a")
            handle:close()
            -- Small delay to ensure container is ready
            ngx.sleep(0.1)
        }
        
        proxy_pass http://mcp_duckduckgo/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
    }
    
    # Time MCP server
    location /time/ {
        # Trigger unpause before proxying
        access_by_lua_block {
            local container = "mcp-time"
            local handle = io.popen("/path/to/container-lifecycle-manager.sh unpause " .. container .. " 2>&1")
            local result = handle:read("*a")
            handle:close()
            -- Small delay to ensure container is ready
            ngx.sleep(0.1)
        }
        
        proxy_pass http://mcp_time/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
    }
    
    # YouTube Transcript MCP server
    location /youtube-transcript/ {
        # Trigger unpause before proxying
        access_by_lua_block {
            local container = "mcp-youtube-transcript"
            local handle = io.popen("/path/to/container-lifecycle-manager.sh unpause " .. container .. " 2>&1")
            local result = handle:read("*a")
            handle:close()
            -- Small delay to ensure container is ready
            ngx.sleep(0.1)
        }
        
        proxy_pass http://mcp_youtube_transcript/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
    }
}